{"version":3,"sources":["components/ProfileStats/styles.module.scss","components/FriendListItem/styles.module.scss","components/ProfileDescription/styles.module.scss","components/StatisticItem/styles.module.scss","components/Statistics/styles.module.scss","components/Profile/styles.module.scss","components/FriendList/styles.module.scss","components/TransactionHistory/styles.module.scss","components/ProfileDescription/index.js","components/ProfileStats/index.js","components/Profile/index.js","components/StatisticItem/index.js","components/Statistics/index.js","components/FriendListItem/index.js","components/FriendList/index.js","components/TransactionHistoryItem/index.js","components/TransactionHistory/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProfileDescription","name","tag","location","avatar","className","styles","description","src","alt","defaultProps","ProfileStats","stats","label","quantity","followers","views","likes","Profile","profile","StatisticItem","percentage","item","Statistics","title","statistics","statList","map","stat","key","id","FriendListItem","isOnline","status","status__online","status__offline","width","FriendList","friends","friendList","friend","TransactionHistoryItem","type","amount","currency","TransactionHistory","items","transactionHistory","App","user","statisticalData","friendsData","transactionData","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c005d0c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"stats\":\"styles_stats__1D6b3\",\"label\":\"styles_label__1Jj_b\",\"quantity\":\"styles_quantity__3AJ4H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"styles_item__3Xoiu\",\"status\":\"styles_status__hCjiW\",\"status__online\":\"styles_status__online__3OWzv\",\"status__offline\":\"styles_status__offline__7BYky\",\"avatar\":\"styles_avatar__ifxWk\",\"name\":\"styles_name__3RH-x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"styles_description__2_fm9\",\"avatar\":\"styles_avatar__2t3bD\",\"name\":\"styles_name__3pQJz\",\"tag\":\"styles_tag__HOVgS\",\"location\":\"styles_location__3sder\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"styles_item__2MNR6\",\"label\":\"styles_label__1OMTs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"styles_statistics__y1A9U\",\"title\":\"styles_title__RjGg1\",\"statList\":\"styles_statList__3z4Kg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"styles_profile__hVznA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendList\":\"styles_friendList__yY3lI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionHistory\":\"styles_transactionHistory__1P50h\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.scss';\n\nconst ProfileDescription = ({ name, tag, location, avatar }) => {\n    return (\n        <div className={styles.description}>\n            <img\n                src={avatar}\n                alt=\"user avatar\"\n                className={styles.avatar}\n            />\n            <p className={styles.name}>{name}</p>\n            <p className={styles.tag}>@{tag}</p>\n            <p className={styles.location}>{location}</p>\n        </div>\n    )\n};\n\nProfileDescription.propTypes = {\n    name: PropTypes.string.isRequired,\n    tag: PropTypes.string,\n    location: PropTypes.string,\n    avatar: PropTypes.string,\n    stats: PropTypes.shape({\n        followers: PropTypes.number,\n        views: PropTypes.number,\n        likes: PropTypes.number,\n    }),\n}\n\nProfileDescription.defaultProps = {\n    name: 'Stranger',\n    avatar: 'https://bit.ly/3lAYNyj',\n}\n\nexport default ProfileDescription;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.scss';\n\n\nconst ProfileStats = ({ stats }) => {\n    return (\n        <ul className={styles.stats}>\n            <li>\n                <span className={styles.label}>Followers</span>\n                <span className={styles.quantity}>{stats.followers}</span>\n            </li>\n            <li>\n                <span className={styles.label}>Views</span>\n                <span className={styles.quantity}>{stats.views}</span>\n            </li>\n            <li>\n                <span className={styles.label}>Likes</span>\n                <span className={styles.quantity}>{stats.likes}</span>\n            </li>\n        </ul>\n    );\n};\n\nProfileStats.propTypes = {\n    stats: PropTypes.shape({\n        followers: PropTypes.number,\n        views: PropTypes.number,\n        likes: PropTypes.number,\n    }),\n}\n\nexport default ProfileStats;","import React from 'react';\nimport ProfileDescription from '../ProfileDescription';\nimport ProfileStats from '../ProfileStats';\nimport styles from './styles.module.scss';\n\nconst Profile = ({ name, tag, location, avatar, stats }) => {\n    return (\n        <div className={styles.profile}>\n            <ProfileDescription\n                name={name}\n                tag={tag}\n                location={location}\n                avatar={avatar} />\n            <ProfileStats\n                stats={stats} />\n        </div>\n    )\n}\n\nexport default Profile;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.scss';\n\nconst StatisticItem = ({ label, percentage }) => {\n    return (\n        <li className={styles.item}>\n            <span className={styles.label}>{label}</span>\n            <span className={styles.percentage}>{percentage}%</span>\n        </li>\n    );\n};\n\nStatisticItem.propTypes = {\n    label: PropTypes.string,\n    percentage: PropTypes.number,\n}\n\nexport default StatisticItem;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport StatisticItem from '../StatisticItem';\nimport styles from './styles.module.scss';\n\nconst Statistics = ({ title, stats }) => {\n    return (\n        <section className={styles.statistics}>\n            <h2 className={styles.title}>{title}</h2>\n\n            <ul className={styles.statList}>\n                {stats.map(\n                    (stat) => <StatisticItem key={stat.id} label={stat.label} percentage={stat.percentage} />\n                )}\n            </ul>\n        </section >\n    )\n}\n\nStatistics.propTypes = {\n    title: PropTypes.string,\n    stats: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string,\n            label: PropTypes.string,\n            percentage: PropTypes.number,\n        })\n    )\n}\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.scss';\n\nconst FriendListItem = ({ avatar, name, isOnline }) => {\n    return (\n        <li className={styles.item}>\n            <span className={`${styles.status} ${isOnline ? styles.status__online : styles.status__offline}`}></span>\n            <img className={styles.avatar} src={avatar} alt={name} width=\"48\" />\n            <p className={styles.name}>{name}</p>\n        </li>\n    )\n};\n\nFriendListItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    avatar: PropTypes.string,\n    isOnline: PropTypes.bool,\n}\n\nFriendListItem.defaultProps = {\n    name: 'Stranger',\n    avatar: 'https://bit.ly/3lAYNyj',\n}\n\nexport default FriendListItem;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FriendListItem from '../FriendListItem';\nimport styles from './styles.module.scss';\n\n\nconst FriendList = ({ friends }) => {\n    return (\n        <ul className={styles.friendList}>\n            {friends.map(friend => <FriendListItem\n                key={friend.id}\n                avatar={friend.avatar}\n                name={friend.name}\n                isOnline={friend.isOnline} />)}\n        </ul>\n    )\n};\n\nFriendList.propTypes = {\n    friends: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number,\n            name: PropTypes.string.isRequired,\n            avatar: PropTypes.string,\n            isOnline: PropTypes.bool,\n        })\n    )\n}\n\nexport default FriendList;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TransactionHistoryItem = ({ item }) => {\n    return (\n        <tr>\n            <td>{item.type}</td>\n            <td>{item.amount}</td>\n            <td>{item.currency}</td>\n        </tr>\n    );\n};\n\nTransactionHistoryItem.propTypes = {\n    item: PropTypes.shape({\n        type: PropTypes.string,\n        amount: PropTypes.string,\n        currency: PropTypes.string,\n    })\n}\n\nexport default TransactionHistoryItem;","import React from 'react';\nimport TransactionHistoryItem from '../TransactionHistoryItem';\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.scss';\n\nconst TransactionHistory = ({ items }) => {\n    return (\n        <table className={styles.transactionHistory}>\n            <thead>\n                <tr>\n                    <th>Type</th>\n                    <th>Amount</th>\n                    <th>Currency</th>\n                </tr>\n            </thead>\n            <tbody>\n                {items.map(item => <TransactionHistoryItem key={item.id} item={item} />)}\n            </tbody>\n        </table>\n    );\n};\n\nTransactionHistory.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            type: PropTypes.string,\n            amount: PropTypes.string,\n            currency: PropTypes.string,\n        })\n    )\n}\n\nexport default TransactionHistory;","import React from 'react';\nimport './App.css';\nimport user from './data/user.json';\nimport Profile from './components/Profile';\nimport Statistics from './components/Statistics';\nimport statisticalData from './data/statistical-data.json';\nimport FriendList from './components/FriendList';\nimport friendsData from './data/friends.json';\nimport TransactionHistory from './components/TransactionHistory';\nimport transactionData from './data/transactions.json';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"wrap\">\n        <Profile\n          name={user.name}\n          tag={user.tag}\n          location={user.location}\n          avatar={user.avatar}\n          stats={user.stats} />\n        <Statistics\n          title=\"Upload stats\"\n          stats={statisticalData} />\n      </div>\n      <div className=\"wrap\">\n        <FriendList friends={friendsData} />\n      </div>\n      <div className=\"wrap wrap-out\">\n        <TransactionHistory items={transactionData} />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}